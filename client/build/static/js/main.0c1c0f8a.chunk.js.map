{"version":3,"sources":["redux/pages.js","redux/actions.js","redux/initialState.js","redux/reducers.js","components/Rating.js","components/BookList.js","components/BookListContainer.js","components/NewBook.js","components/NewBookContainer.js","components/Auth.js","components/AuthContainer.js","components/App.js","components/AppContainer.js","AppWrapper.js","serviceWorker.js","index.js"],"names":["PAGES","BOOK_LIST","BOOK_CREATE","API","ACTIONS","FETCH_START","FETCH_END","SHOW_BOOKS","UPDATE_TITLE","UPDATE_AUTHOR","UPDATE_DESCRIPTION","UPDATE_RATING","POST_START","POST_END","AUTH","UPDATE_LOGIN","UPDATE_PASSWORD","LOG_IN","LOG_OUT","REQUEST_START","MISC","SWITCH_PAGE","loadBooks","dispatch","type","xhr","XMLHttpRequest","open","concat","withCredentials","addEventListener","books","status","logOut","JSON","parse","response","send","postBook","getState","_getState$bookCreate","bookCreate","title","author","description","rating","setRequestHeader","switchPage","stringify","authRequest","logInRequest","_getState2$auth","auth","login","password","page","initialState","bookList","loading","text","posting","loggedIn","requesting","misc","reducer","combineReducers","state","arguments","length","undefined","action","Object","objectSpread","Rating","props","star","react_default","a","createElement","className","stars","i","push","BookList","this","data","columns","label","field","sort","width","rows","map","book","booktitle","bookauthor","bookdescription","Fragment","Navbar","expand","Nav","navbar","NavItem","NavLink","active","href","onClick","switchToNewBook","Card","CardBody","CardTitle","mdbreact_esm","striped","hover","fixed","React","Component","BookListContainer","connect","NewBook","switchToBookList","Row","Col","sm","Form","FormGroup","Label","for","Input","id","value","onChange","event","updateTitle","target","placeholder","updateAuthor","updateDescription","updateRating","Button","NewBookContainer","updateBookTitle","updateBookAuthor","updateBookDescription","updateBookRating","Auth","updateLogin","updatePassword","logIn","AuthContainer","App","components_BookListContainer","components_NewBookContainer","components_AuthContainer","AppContainer","store","createStore","applyMiddleware","thunk","logger","AppWrapper","react_redux_es","components_AppContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_AppWrapper","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0c1c0f8a.chunk.js","sourcesContent":["export const PAGES = {\n    BOOK_LIST: 'book_list',\n    BOOK_CREATE: 'book_create'\n};\n","import {PAGES} from \"./pages\";\n\nconst API = '/api';\n\nexport const ACTIONS = {\n    BOOK_LIST: {\n        FETCH_START: 'fetch_books_start',\n        FETCH_END: 'fetch_books_end',\n        SHOW_BOOKS: 'show_books'\n    },\n    BOOK_CREATE: {\n        UPDATE_TITLE: 'update_title',\n        UPDATE_AUTHOR: 'update_author',\n        UPDATE_DESCRIPTION: 'update_description',\n        UPDATE_RATING: 'update_rating',\n        POST_START: 'post_book_start',\n        POST_END: 'post_book_end'\n    },\n    AUTH: {\n        UPDATE_LOGIN: 'update_login',\n        UPDATE_PASSWORD: 'update_password',\n        LOG_IN: 'log_in',\n        LOG_OUT: 'log_out',\n        REQUEST_START: 'start_auth_request'\n    },\n    MISC: {\n        SWITCH_PAGE: 'switch_page'\n    }\n};\n\nfunction fetchBooksStart() {\n    return {\n        type: ACTIONS.BOOK_LIST.FETCH_START\n    };\n}\n\nfunction fetchBooksEnd() {\n    return {\n        type: ACTIONS.BOOK_LIST.FETCH_END\n    };\n}\n\nfunction showBooks(books) {\n    return {\n        type: ACTIONS.BOOK_LIST.SHOW_BOOKS,\n        books\n    };\n}\n\nexport function loadBooks() {\n    return dispatch => {\n        dispatch(fetchBooksStart());\n        const xhr = new XMLHttpRequest();\n        xhr.open('GET', `${API}/books`);\n        xhr.withCredentials = true;\n        xhr.addEventListener('load', () => {\n            dispatch(fetchBooksEnd());\n            if (xhr.status === 401) {\n                dispatch(logOut());\n            } else {\n                dispatch(showBooks(JSON.parse(xhr.response)));\n            }\n        });\n        xhr.send();\n    };\n}\n\nexport function updateBookTitle(title) {\n    return {\n        type: ACTIONS.BOOK_CREATE.UPDATE_TITLE,\n        title\n    };\n}\n\nexport function updateBookAuthor(author) {\n    return {\n        type: ACTIONS.BOOK_CREATE.UPDATE_AUTHOR,\n        author\n    };\n}\n\nexport function updateBookDescription(description) {\n    return {\n        type: ACTIONS.BOOK_CREATE.UPDATE_DESCRIPTION,\n        description\n    };\n}\n\nexport function updateBookRating(rating) {\n    return {\n        type: ACTIONS.BOOK_CREATE.UPDATE_RATING,\n        rating\n    };\n}\n\nfunction postStart() {\n    return {\n        type: ACTIONS.BOOK_CREATE.POST_START\n    };\n}\n\nfunction postEnd() {\n    return {\n        type: ACTIONS.BOOK_CREATE.POST_END\n    };\n}\n\nexport function postBook() {\n    return (dispatch, getState) => {\n        const { bookCreate: { title, author, description, rating } } = getState();\n        dispatch(postStart());\n        const xhr = new XMLHttpRequest();\n        xhr.open('POST', `${API}/books`);\n        xhr.withCredentials = true;\n        xhr.setRequestHeader('Content-Type', 'application/json');\n        xhr.addEventListener('load', () => {\n            dispatch(postEnd());\n            if (xhr.status === 401) {\n                dispatch(logOut());\n            } else {\n                dispatch(switchPage(PAGES.BOOK_LIST));\n            }\n        });\n        xhr.send(JSON.stringify({\n            title,\n            author,\n            description,\n            rating\n        }));\n    };\n}\n\nexport function updateLogin(login) {\n    return {\n        type: ACTIONS.AUTH.UPDATE_LOGIN,\n        login\n    };\n}\n\nexport function updatePassword(password) {\n    return {\n        type: ACTIONS.AUTH.UPDATE_PASSWORD,\n        password\n    };\n}\n\nfunction logIn() {\n    return {\n        type: ACTIONS.AUTH.LOG_IN\n    };\n}\n\nfunction logOut() {\n    return {\n        type: ACTIONS.AUTH.LOG_OUT\n    };\n}\n\nfunction authRequest() {\n    return {\n        type: ACTIONS.AUTH.REQUEST_START\n    };\n}\n\nexport function logInRequest() {\n    return (dispatch, getState) => {\n        const { auth: { login, password } } = getState();\n        dispatch(authRequest());\n        const xhr = new XMLHttpRequest();\n        xhr.open('POST', `${API}/login`);\n        xhr.withCredentials = true;\n        xhr.setRequestHeader('Content-Type', 'application/json');\n        xhr.addEventListener('load', () => {\n            dispatch(xhr.status === 401 ? logOut() : logIn());\n        });\n        xhr.send(JSON.stringify({\n            login,\n            password\n        }));\n    };\n}\n\nexport function logOutRequest() {\n    return dispatch => {\n        dispatch(authRequest());\n        const xhr = new XMLHttpRequest();\n        xhr.open('POST', `${API}/logout`);\n        xhr.withCredentials = true;\n        xhr.addEventListener('load', () => {\n            dispatch(logOut());\n        });\n        xhr.send();\n    };\n}\n\nexport function switchPage(page) {\n    return {\n        type: ACTIONS.MISC.SWITCH_PAGE,\n        page\n    };\n}\n","import { PAGES } from './pages';\n\nexport const initialState = {\n    bookList: {\n        books: null,\n        loading: false\n    },\n    bookCreate: {\n        title: '',\n        text: '',\n        description: '',\n        rating: null,\n        posting: false\n    },\n    auth: {\n        login: '',\n        password: '',\n        loggedIn: true,\n        requesting: false\n    },\n    misc: {\n        page: PAGES.BOOK_LIST\n    }\n};\n","import {ACTIONS} from \"./actions\";\nimport {combineReducers} from \"redux\";\nimport {initialState} from \"./initialState\";\n\nexport const reducer = combineReducers({\n    bookList,\n    bookCreate,\n    auth,\n    misc\n});\n\nfunction bookList(state = initialState.bookList, action) {\n    switch (action.type) {\n        case ACTIONS.BOOK_LIST.FETCH_START:\n            return {\n                ...state,\n                loading: true\n            };\n        case ACTIONS.BOOK_LIST.FETCH_END:\n            return {\n                ...state,\n                loading: false\n            };\n        case ACTIONS.BOOK_LIST.SHOW_BOOKS:\n            return {\n                ...state,\n                books: action.books\n            };\n        default:\n            return state;\n    }\n}\n\nfunction bookCreate(state = initialState.bookCreate, action) {\n    switch (action.type) {\n        case ACTIONS.BOOK_CREATE.UPDATE_TITLE:\n            return {\n                ...state,\n                title: action.title\n            };\n        case ACTIONS.BOOK_CREATE.UPDATE_AUTHOR:\n            return {\n                ...state,\n                author: action.author\n            };\n        case ACTIONS.BOOK_CREATE.UPDATE_DESCRIPTION:\n            return {\n                ...state,\n                description: action.description\n            };\n        case ACTIONS.BOOK_CREATE.UPDATE_RATING:\n            return {\n                ...state,\n                rating: action.rating\n            };\n        case ACTIONS.BOOK_CREATE.POST_START:\n            return {\n                ...state,\n                posting: true\n            };\n        case ACTIONS.BOOK_CREATE.POST_END:\n            return {\n                ...state,\n                posting: false\n            };\n        default:\n            return state;\n    }\n}\n\nfunction auth(state = initialState.auth, action) {\n    switch (action.type) {\n        case ACTIONS.AUTH.LOG_IN:\n            return {\n                ...state,\n                loggedIn: true,\n                requesting: false\n            };\n        case ACTIONS.AUTH.LOG_OUT:\n            return {\n                ...state,\n                loggedIn: false,\n                requesting: false\n            };\n        case ACTIONS.AUTH.REQUEST_START:\n            return {\n                ...state,\n                requesting: true\n            };\n        case ACTIONS.AUTH.UPDATE_LOGIN:\n            return {\n                ...state,\n                login: action.login\n            };\n        case ACTIONS.AUTH.UPDATE_PASSWORD:\n            return {\n                ...state,\n                password: action.password\n            };\n        default:\n            return state;\n    }\n}\n\nfunction misc(state = initialState.misc, action) {\n    switch (action.type) {\n        case ACTIONS.MISC.SWITCH_PAGE:\n            return {\n                ...state,\n                page: action.page\n            };\n        default:\n            return state;\n    }\n}\n","import React from 'react';\n\nexport default function Rating(props) {\n  const star = <i className=\"fa fa-star\"></i>;\n  const stars = [];\n  for (let i = 0; i< props.rating; i++) {\n    stars.push(star);\n  }\n  return (\n    <div className=\"text-warning\">\n    {stars}\n    </div>\n  )\n}\n","import React from 'react';\nimport { MDBDataTable } from 'mdbreact';\nimport { Card, CardTitle, CardBody, Navbar, Nav, NavItem, NavLink } from 'reactstrap';\nimport Rating from './Rating';\n\nclass BookList extends React.Component {\n\n    componentDidMount() {\n        this.props.loadBooks();\n    }\n\n    render() {\n        if (this.props.books === null || this.props.loading) {\n            return 'Loading...';\n        }\n        const data = {\n          columns: [\n            {\n        label: 'Title',\n        field: 'title',\n        sort: 'asc',\n        width: 150\n            },\n            {\n        label: 'Author',\n        field: 'author',\n        sort: 'asc',\n        width: 150\n            },\n            {\n        label: 'Description',\n        field: 'description',\n        sort: 'asc',\n        width: 150\n            },\n            {\n        label: 'Rating',\n        field: 'rating',\n        sort: 'asc',\n        width: 150\n            }\n          ],\n          rows: this.props.books.map(book => {\n            return {\n              title: book.booktitle,\n              author: book.bookauthor,\n              description: book.bookdescription,\n              rating: <Rating rating={book.rating}/>\n            }\n          })\n        }\n        return (\n            <>\n              <Navbar expand=\"md\">\n                <Nav navbar className=\"mr-auto\">\n                <NavItem>\n                <NavLink active href=\"#\" onClick={this.props.switchToNewBook}>Add new book</NavLink>\n                </NavItem>\n                <Nav navbar className=\"ml-auto\">\n                <NavItem>\n                <NavLink active href=\"#\" onClick={this.props.logOut}>Sign out</NavLink>\n                </NavItem>\n                </Nav>\n              </Nav>\n              </Navbar>\n                  <Card>\n                  <CardBody>\n                    <CardTitle>Book List</CardTitle>\n                  <MDBDataTable\n                    striped\n                    hover\n                    fixed\n                    data={data}\n                  />\n                  </CardBody>\n                  </Card>\n\n\n            </>\n        );\n    }\n}\n\nexport default BookList;\n","import {connect} from \"react-redux\";\nimport {loadBooks, logOutRequest, switchPage} from \"../redux/actions\";\nimport {PAGES} from \"../redux/pages\";\nimport BookList from \"./BookList\";\n\nfunction mapStateToProps(state) {\n    return {\n        books: state.bookList.books,\n        loading: state.bookList.loading\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        loadBooks: () => dispatch(loadBooks()),\n        switchToNewBook: () => dispatch(switchPage(PAGES.BOOK_CREATE)),\n        logOut: () => dispatch(logOutRequest())\n    };\n}\n\nconst BookListContainer = connect(mapStateToProps, mapDispatchToProps)(BookList);\n\nexport default BookListContainer;\n","import React from 'react';\nimport { Row, Col, Card, CardTitle, CardBody, Button, Form, FormGroup, Label, Input, Navbar, Nav, NavItem, NavLink } from 'reactstrap';\n\nconst NewBook = (props) => {\n    return (\n        <>\n              <Navbar expand=\"md\">\n                <Nav navbar className=\"mr-auto\">\n                <NavItem>\n                <NavLink active href=\"#\" onClick={props.switchToBookList}>Switch to list of books</NavLink>\n                </NavItem>\n              </Nav>\n              </Navbar>\n              <Row className=\"mt-4\">\n                <Col sm=\"3\"/>\n                <Col sm=\"6\">\n                <Card>\n                <CardBody>\n                  <CardTitle>Add new article</CardTitle>\n              <Form>\n                <FormGroup>\n                  <Label for=\"title\">New book title</Label>\n                <Input type=\"text\"\n                  id=\"title\" value={props.title}\n                  onChange={event => props.updateTitle(event.target.value)}\n                  placeholder=\"Book title\" />\n                </FormGroup>\n                <FormGroup>\n                  <Label for=\"author\">New book author</Label>\n                <Input type=\"text\"\n                  id=\"author\" value={props.author}\n                  onChange={event => props.updateAuthor(event.target.value)}\n                  placeholder=\"Book author\" />\n                </FormGroup>\n                <FormGroup>\n                  <Label for=\"description\">New book description</Label>\n                <Input type=\"textarea\"\n                  id=\"description\" value={props.description}\n                  onChange={event => props.updateDescription(event.target.value)}\n                  placeholder=\"Book desctiption\" />\n                </FormGroup>\n                <FormGroup>\n                  <Label for=\"rating\">New book rating</Label>\n                <Input type=\"text\"\n                  id=\"rating\"\n                  value={props.rating}\n                  onChange={event => props.updateRating(event.target.value)}\n                  placeholder=\"Rating: please, enter number from 0 to 10\" />\n                </FormGroup>\n                <Button onClick={props.postBook}>Submit</Button>\n              </Form>\n            </CardBody>\n            </Card>\n            </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default NewBook;\n","import {connect} from \"react-redux\";\nimport {postBook, switchPage,\n  updateBookAuthor, updateBookTitle,\n  updateBookDescription, updateBookRating } from \"../redux/actions\";\nimport NewBook from \"./NewBook\";\nimport {PAGES} from \"../redux/pages\";\n\nfunction mapStateToProps(state) {\n    return {\n        title: state.bookCreate.title,\n        author: state.bookCreate.author,\n        description: state.bookCreate.description,\n        rating: state.bookCreate.rating,\n        posting: state.bookCreate.posting\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        updateTitle: title => dispatch(updateBookTitle(title)),\n        updateAuthor: author => dispatch(updateBookAuthor(author)),\n        updateDescription: description => dispatch(updateBookDescription(description)),\n        updateRating: rating => dispatch(updateBookRating(rating)),\n        postBook: () => dispatch(postBook()),\n        switchToBookList: () => dispatch(switchPage(PAGES.BOOK_LIST))\n    };\n}\n\nconst NewBookContainer = connect(mapStateToProps, mapDispatchToProps)(NewBook);\n\nexport default NewBookContainer;\n","import React from 'react';\nimport { Row, Col, Card, CardTitle, CardBody,\n  Button, Form, FormGroup, Label, Input } from 'reactstrap';\n\nconst Auth = (props) => {\n    return (\n      <Row className=\"mt-4\">\n        <Col sm=\"3\"/>\n        <Col sm=\"6\">\n        <Card>\n        <CardBody>\n          <CardTitle>Login form</CardTitle>\n      <Form>\n        <FormGroup>\n          <Label for=\"login\">Login</Label>\n        <Input type=\"text\"\n          id=\"login\" value={props.login}\n          onChange={(event) => props.updateLogin(event.target.value)}\n          placeholder=\"Login: please, enter 'foo'\" />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"password\">Password</Label>\n        <Input type=\"password\"\n          id=\"password\"\n          value={props.password}\n          onChange={(event) => props.updatePassword(event.target.value)}\n          placeholder=\"Password: please, enter 'bar'\" />\n        </FormGroup>\n        <Button onClick={props.logIn}>Submit</Button>\n      </Form>\n    </CardBody>\n    </Card>\n    </Col>\n    </Row>\n    );\n};\n\nexport default Auth;\n","import {connect} from \"react-redux\";\nimport {logInRequest, updateLogin, updatePassword} from \"../redux/actions\";\nimport Auth from \"./Auth\";\n\nfunction mapStateToProps(state) {\n    return {\n        login: state.auth.login,\n        password: state.auth.password\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        updateLogin: login => dispatch(updateLogin(login)),\n        updatePassword: password => dispatch(updatePassword(password)),\n        logIn: () => dispatch(logInRequest())\n    };\n}\n\nconst AuthContainer = connect(mapStateToProps, mapDispatchToProps)(Auth);\nexport default AuthContainer;","import React from 'react';\nimport {PAGES} from \"../redux/pages\";\nimport BookListContainer from \"./BookListContainer\";\nimport NewBookContainer from \"./NewBookContainer\";\nimport AuthContainer from \"./AuthContainer\";\n\nconst App = (props) => {\n    return (\n        props.loggedIn\n            ? (props.page === PAGES.BOOK_LIST ? <BookListContainer /> : <NewBookContainer />)\n            : <AuthContainer />\n    );\n};\n\nexport default App;\n","import {connect} from \"react-redux\";\nimport App from \"./App\";\n\nfunction mapStateToProps(state) {\n    return {\n        loggedIn: state.auth.loggedIn,\n        page: state.misc.page\n    };\n}\n\nconst AppContainer = connect(mapStateToProps)(App);\nexport default AppContainer;\n","import React from 'react';\nimport {applyMiddleware, createStore} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport {reducer} from \"./redux/reducers\";\nimport {Provider} from \"react-redux\";\nimport AppContainer from \"./components/AppContainer\";\nimport {logger} from \"redux-logger\";\n\nconst store = createStore(reducer, applyMiddleware(thunk, logger));\n\nfunction AppWrapper() {\n  return (\n    <div className=\"container\">\n      <Provider store={store}>\n        <AppContainer />\n      </Provider>\n    </div>\n  );\n}\n\nexport default AppWrapper;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. AppWrapper is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport AppWrapper from './AppWrapper';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<AppWrapper />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}